/******************************************************************************
 * This file was generated by langium-cli 3.4.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import type { AstNode, Reference, ReferenceInfo, TypeMetaData } from 'langium';
import { AbstractAstReflection } from 'langium';

export const CrmscriptTerminals = {
    WS: /\s+/,
    ID: /[_a-zA-Z][\w_]*/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*/,
    STRING: /"[^"]*"|'[^']*'/,
};

export type CrmscriptTerminalNames = keyof typeof CrmscriptTerminals;

export type CrmscriptKeywordNames = 
    | "!="
    | "("
    | ")"
    | "*"
    | "+"
    | ","
    | "-"
    | "."
    | "/"
    | ":"
    | ";"
    | "<"
    | "<="
    | "="
    | "=="
    | ">"
    | ">="
    | "Class"
    | "and"
    | "else"
    | "for"
    | "if"
    | "or"
    | "print"
    | "return"
    | "while"
    | "{"
    | "}";

export type CrmscriptTokenNames = CrmscriptTerminalNames | CrmscriptKeywordNames;

export type ClassMember = FieldMember | MethodMember;

export const ClassMember = 'ClassMember';

export function isClassMember(item: unknown): item is ClassMember {
    return reflection.isInstance(item, ClassMember);
}

export type DefinitionElement = DefinitionNamedElement | ExpressionBlock;

export const DefinitionElement = 'DefinitionElement';

export function isDefinitionElement(item: unknown): item is DefinitionElement {
    return reflection.isInstance(item, DefinitionElement);
}

export type DefinitionNamedElement = Class | FieldMember;

export const DefinitionNamedElement = 'DefinitionNamedElement';

export function isDefinitionNamedElement(item: unknown): item is DefinitionNamedElement {
    return reflection.isInstance(item, DefinitionNamedElement);
}

export type Expression = BinaryExpression | BooleanExpression | IntegerExpression | MemberCall | NilExpression | StringExpression | UnaryExpression;

export const Expression = 'Expression';

export function isExpression(item: unknown): item is Expression {
    return reflection.isInstance(item, Expression);
}

export type ImplementationElement = Expression | ExpressionBlock | ForStatement | FunctionDeclaration | IfStatement | ImplementationNamedElement | PrintStatement | ReturnStatement | WhileStatement;

export const ImplementationElement = 'ImplementationElement';

export function isImplementationElement(item: unknown): item is ImplementationElement {
    return reflection.isInstance(item, ImplementationElement);
}

export type ImplementationNamedElement = FunctionDeclaration | VariableDeclaration;

export const ImplementationNamedElement = 'ImplementationNamedElement';

export function isImplementationNamedElement(item: unknown): item is ImplementationNamedElement {
    return reflection.isInstance(item, ImplementationNamedElement);
}

export interface BinaryExpression extends AstNode {
    readonly $container: BinaryExpression | ForStatement | IfStatement | ImplementationUnit | MemberCall | ReturnStatement | UnaryExpression | VariableDeclaration | WhileStatement;
    readonly $type: 'BinaryExpression';
    left: Expression | MemberCall;
    operator: '!=' | '*' | '+' | '-' | '/' | '<' | '<=' | '=' | '==' | '>' | '>=' | 'and' | 'or';
    right: Expression | MemberCall;
}

export const BinaryExpression = 'BinaryExpression';

export function isBinaryExpression(item: unknown): item is BinaryExpression {
    return reflection.isInstance(item, BinaryExpression);
}

export interface BooleanExpression extends AstNode {
    readonly $container: BinaryExpression | ForStatement | IfStatement | ImplementationUnit | MemberCall | ReturnStatement | UnaryExpression | VariableDeclaration | WhileStatement;
    readonly $type: 'BooleanExpression';
    value: boolean;
}

export const BooleanExpression = 'BooleanExpression';

export function isBooleanExpression(item: unknown): item is BooleanExpression {
    return reflection.isInstance(item, BooleanExpression);
}

export interface Class extends AstNode {
    readonly $container: DefinitionUnit | ExpressionBlock;
    readonly $type: 'Class';
    members: Array<ClassMember>;
    name: string;
}

export const Class = 'Class';

export function isClass(item: unknown): item is Class {
    return reflection.isInstance(item, Class);
}

export interface DefinitionUnit extends AstNode {
    readonly $type: 'DefinitionUnit';
    definitionelements: Array<DefinitionElement>;
}

export const DefinitionUnit = 'DefinitionUnit';

export function isDefinitionUnit(item: unknown): item is DefinitionUnit {
    return reflection.isInstance(item, DefinitionUnit);
}

export interface ExpressionBlock extends AstNode {
    readonly $container: DefinitionUnit | ExpressionBlock | ForStatement | FunctionDeclaration | IfStatement | ImplementationUnit | WhileStatement;
    readonly $type: 'ExpressionBlock';
    definitionelements: Array<DefinitionElement>;
}

export const ExpressionBlock = 'ExpressionBlock';

export function isExpressionBlock(item: unknown): item is ExpressionBlock {
    return reflection.isInstance(item, ExpressionBlock);
}

export interface FieldMember extends AstNode {
    readonly $container: Class | DefinitionUnit | ExpressionBlock;
    readonly $type: 'FieldMember';
    name: string;
    returnType: Reference<Class>;
}

export const FieldMember = 'FieldMember';

export function isFieldMember(item: unknown): item is FieldMember {
    return reflection.isInstance(item, FieldMember);
}

export interface ForStatement extends AstNode {
    readonly $container: ImplementationUnit;
    readonly $type: 'ForStatement';
    block: ExpressionBlock;
    condition?: Expression;
    counter?: ImplementationNamedElement;
    execution?: Expression;
}

export const ForStatement = 'ForStatement';

export function isForStatement(item: unknown): item is ForStatement {
    return reflection.isInstance(item, ForStatement);
}

export interface FunctionDeclaration extends AstNode {
    readonly $container: ForStatement | ImplementationUnit;
    readonly $type: 'FunctionDeclaration';
    body: ExpressionBlock;
    name: string;
    parameters: Array<Parameter>;
    returnType: Reference<Class>;
}

export const FunctionDeclaration = 'FunctionDeclaration';

export function isFunctionDeclaration(item: unknown): item is FunctionDeclaration {
    return reflection.isInstance(item, FunctionDeclaration);
}

export interface IfStatement extends AstNode {
    readonly $container: ImplementationUnit;
    readonly $type: 'IfStatement';
    block: ExpressionBlock;
    condition: Expression;
    elseBlock?: ExpressionBlock;
}

export const IfStatement = 'IfStatement';

export function isIfStatement(item: unknown): item is IfStatement {
    return reflection.isInstance(item, IfStatement);
}

export interface ImplementationUnit extends AstNode {
    readonly $type: 'ImplementationUnit';
    implementationelements: Array<ImplementationElement>;
}

export const ImplementationUnit = 'ImplementationUnit';

export function isImplementationUnit(item: unknown): item is ImplementationUnit {
    return reflection.isInstance(item, ImplementationUnit);
}

export interface IntegerExpression extends AstNode {
    readonly $container: BinaryExpression | ForStatement | IfStatement | ImplementationUnit | MemberCall | ReturnStatement | UnaryExpression | VariableDeclaration | WhileStatement;
    readonly $type: 'IntegerExpression';
    value: number;
}

export const IntegerExpression = 'IntegerExpression';

export function isIntegerExpression(item: unknown): item is IntegerExpression {
    return reflection.isInstance(item, IntegerExpression);
}

export interface MemberCall extends AstNode {
    readonly $container: BinaryExpression | ForStatement | IfStatement | ImplementationUnit | MemberCall | ReturnStatement | UnaryExpression | VariableDeclaration | WhileStatement;
    readonly $type: 'MemberCall';
    arguments: Array<Expression>;
    element: Reference<ImplementationNamedElement>;
    explicitOperationCall: boolean;
    previous?: MemberCall;
}

export const MemberCall = 'MemberCall';

export function isMemberCall(item: unknown): item is MemberCall {
    return reflection.isInstance(item, MemberCall);
}

export interface MethodMember extends AstNode {
    readonly $container: Class;
    readonly $type: 'MethodMember';
    name: string;
    parameters: Array<Parameter>;
    returnType: Reference<Class>;
}

export const MethodMember = 'MethodMember';

export function isMethodMember(item: unknown): item is MethodMember {
    return reflection.isInstance(item, MethodMember);
}

export interface NilExpression extends AstNode {
    readonly $container: BinaryExpression | ForStatement | IfStatement | ImplementationUnit | MemberCall | ReturnStatement | UnaryExpression | VariableDeclaration | WhileStatement;
    readonly $type: 'NilExpression';
    value: 'nil';
}

export const NilExpression = 'NilExpression';

export function isNilExpression(item: unknown): item is NilExpression {
    return reflection.isInstance(item, NilExpression);
}

export interface Parameter extends AstNode {
    readonly $container: FunctionDeclaration | MethodMember;
    readonly $type: 'Parameter';
    name: string;
    type: Reference<Class>;
}

export const Parameter = 'Parameter';

export function isParameter(item: unknown): item is Parameter {
    return reflection.isInstance(item, Parameter);
}

export interface PrintStatement extends AstNode {
    readonly $container: ImplementationUnit;
    readonly $type: 'PrintStatement';
    value: StringExpression;
}

export const PrintStatement = 'PrintStatement';

export function isPrintStatement(item: unknown): item is PrintStatement {
    return reflection.isInstance(item, PrintStatement);
}

export interface ReturnStatement extends AstNode {
    readonly $container: ImplementationUnit;
    readonly $type: 'ReturnStatement';
    value?: Expression;
}

export const ReturnStatement = 'ReturnStatement';

export function isReturnStatement(item: unknown): item is ReturnStatement {
    return reflection.isInstance(item, ReturnStatement);
}

export interface StringExpression extends AstNode {
    readonly $container: BinaryExpression | ForStatement | IfStatement | ImplementationUnit | MemberCall | PrintStatement | ReturnStatement | UnaryExpression | VariableDeclaration | WhileStatement;
    readonly $type: 'StringExpression';
    value: string;
}

export const StringExpression = 'StringExpression';

export function isStringExpression(item: unknown): item is StringExpression {
    return reflection.isInstance(item, StringExpression);
}

export interface UnaryExpression extends AstNode {
    readonly $container: BinaryExpression | ForStatement | IfStatement | ImplementationUnit | MemberCall | ReturnStatement | UnaryExpression | VariableDeclaration | WhileStatement;
    readonly $type: 'UnaryExpression';
    operator: '!' | '+' | '-';
    value: Expression;
}

export const UnaryExpression = 'UnaryExpression';

export function isUnaryExpression(item: unknown): item is UnaryExpression {
    return reflection.isInstance(item, UnaryExpression);
}

export interface VariableDeclaration extends AstNode {
    readonly $container: ForStatement | ImplementationUnit;
    readonly $type: 'VariableDeclaration';
    assignment: boolean;
    name: string;
    type: Reference<Class>;
    value?: Expression;
}

export const VariableDeclaration = 'VariableDeclaration';

export function isVariableDeclaration(item: unknown): item is VariableDeclaration {
    return reflection.isInstance(item, VariableDeclaration);
}

export interface WhileStatement extends AstNode {
    readonly $container: ImplementationUnit;
    readonly $type: 'WhileStatement';
    block: ExpressionBlock;
    condition: Expression;
}

export const WhileStatement = 'WhileStatement';

export function isWhileStatement(item: unknown): item is WhileStatement {
    return reflection.isInstance(item, WhileStatement);
}

export type CrmscriptAstType = {
    BinaryExpression: BinaryExpression
    BooleanExpression: BooleanExpression
    Class: Class
    ClassMember: ClassMember
    DefinitionElement: DefinitionElement
    DefinitionNamedElement: DefinitionNamedElement
    DefinitionUnit: DefinitionUnit
    Expression: Expression
    ExpressionBlock: ExpressionBlock
    FieldMember: FieldMember
    ForStatement: ForStatement
    FunctionDeclaration: FunctionDeclaration
    IfStatement: IfStatement
    ImplementationElement: ImplementationElement
    ImplementationNamedElement: ImplementationNamedElement
    ImplementationUnit: ImplementationUnit
    IntegerExpression: IntegerExpression
    MemberCall: MemberCall
    MethodMember: MethodMember
    NilExpression: NilExpression
    Parameter: Parameter
    PrintStatement: PrintStatement
    ReturnStatement: ReturnStatement
    StringExpression: StringExpression
    UnaryExpression: UnaryExpression
    VariableDeclaration: VariableDeclaration
    WhileStatement: WhileStatement
}

export class CrmscriptAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return [BinaryExpression, BooleanExpression, Class, ClassMember, DefinitionElement, DefinitionNamedElement, DefinitionUnit, Expression, ExpressionBlock, FieldMember, ForStatement, FunctionDeclaration, IfStatement, ImplementationElement, ImplementationNamedElement, ImplementationUnit, IntegerExpression, MemberCall, MethodMember, NilExpression, Parameter, PrintStatement, ReturnStatement, StringExpression, UnaryExpression, VariableDeclaration, WhileStatement];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case BinaryExpression:
            case BooleanExpression:
            case IntegerExpression:
            case MemberCall:
            case NilExpression:
            case StringExpression:
            case UnaryExpression: {
                return this.isSubtype(Expression, supertype);
            }
            case Class: {
                return this.isSubtype(DefinitionNamedElement, supertype);
            }
            case DefinitionNamedElement: {
                return this.isSubtype(DefinitionElement, supertype);
            }
            case Expression:
            case ForStatement:
            case IfStatement:
            case ImplementationNamedElement:
            case PrintStatement:
            case ReturnStatement:
            case WhileStatement: {
                return this.isSubtype(ImplementationElement, supertype);
            }
            case ExpressionBlock: {
                return this.isSubtype(DefinitionElement, supertype) || this.isSubtype(ImplementationElement, supertype);
            }
            case FieldMember: {
                return this.isSubtype(ClassMember, supertype) || this.isSubtype(DefinitionNamedElement, supertype);
            }
            case FunctionDeclaration: {
                return this.isSubtype(ImplementationElement, supertype) || this.isSubtype(ImplementationNamedElement, supertype);
            }
            case MethodMember: {
                return this.isSubtype(ClassMember, supertype);
            }
            case VariableDeclaration: {
                return this.isSubtype(ImplementationNamedElement, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'FieldMember:returnType':
            case 'FunctionDeclaration:returnType':
            case 'MethodMember:returnType':
            case 'Parameter:type':
            case 'VariableDeclaration:type': {
                return Class;
            }
            case 'MemberCall:element': {
                return ImplementationNamedElement;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case BinaryExpression: {
                return {
                    name: BinaryExpression,
                    properties: [
                        { name: 'left' },
                        { name: 'operator' },
                        { name: 'right' }
                    ]
                };
            }
            case BooleanExpression: {
                return {
                    name: BooleanExpression,
                    properties: [
                        { name: 'value', defaultValue: false }
                    ]
                };
            }
            case Class: {
                return {
                    name: Class,
                    properties: [
                        { name: 'members', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case DefinitionUnit: {
                return {
                    name: DefinitionUnit,
                    properties: [
                        { name: 'definitionelements', defaultValue: [] }
                    ]
                };
            }
            case ExpressionBlock: {
                return {
                    name: ExpressionBlock,
                    properties: [
                        { name: 'definitionelements', defaultValue: [] }
                    ]
                };
            }
            case FieldMember: {
                return {
                    name: FieldMember,
                    properties: [
                        { name: 'name' },
                        { name: 'returnType' }
                    ]
                };
            }
            case ForStatement: {
                return {
                    name: ForStatement,
                    properties: [
                        { name: 'block' },
                        { name: 'condition' },
                        { name: 'counter' },
                        { name: 'execution' }
                    ]
                };
            }
            case FunctionDeclaration: {
                return {
                    name: FunctionDeclaration,
                    properties: [
                        { name: 'body' },
                        { name: 'name' },
                        { name: 'parameters', defaultValue: [] },
                        { name: 'returnType' }
                    ]
                };
            }
            case IfStatement: {
                return {
                    name: IfStatement,
                    properties: [
                        { name: 'block' },
                        { name: 'condition' },
                        { name: 'elseBlock' }
                    ]
                };
            }
            case ImplementationUnit: {
                return {
                    name: ImplementationUnit,
                    properties: [
                        { name: 'implementationelements', defaultValue: [] }
                    ]
                };
            }
            case IntegerExpression: {
                return {
                    name: IntegerExpression,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case MemberCall: {
                return {
                    name: MemberCall,
                    properties: [
                        { name: 'arguments', defaultValue: [] },
                        { name: 'element' },
                        { name: 'explicitOperationCall', defaultValue: false },
                        { name: 'previous' }
                    ]
                };
            }
            case MethodMember: {
                return {
                    name: MethodMember,
                    properties: [
                        { name: 'name' },
                        { name: 'parameters', defaultValue: [] },
                        { name: 'returnType' }
                    ]
                };
            }
            case NilExpression: {
                return {
                    name: NilExpression,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case Parameter: {
                return {
                    name: Parameter,
                    properties: [
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case PrintStatement: {
                return {
                    name: PrintStatement,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case ReturnStatement: {
                return {
                    name: ReturnStatement,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case StringExpression: {
                return {
                    name: StringExpression,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case UnaryExpression: {
                return {
                    name: UnaryExpression,
                    properties: [
                        { name: 'operator' },
                        { name: 'value' }
                    ]
                };
            }
            case VariableDeclaration: {
                return {
                    name: VariableDeclaration,
                    properties: [
                        { name: 'assignment', defaultValue: false },
                        { name: 'name' },
                        { name: 'type' },
                        { name: 'value' }
                    ]
                };
            }
            case WhileStatement: {
                return {
                    name: WhileStatement,
                    properties: [
                        { name: 'block' },
                        { name: 'condition' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}

export const reflection = new CrmscriptAstReflection();
