export const SearchEngine = `/** 
A tool for building up SQL queries, by adding fields, criteria, and data. The fields must be given on the following form: starttablename.fieldname, for example "ticket.title". For tables that have foreign keys to other tables, you can reach them with the following notation: starttablename.fieldname.fieldname For example, the firstname of the primary customer of a ticket is: "ticket.cust_id.firstname". The company name of the primary customer of a ticket is: "ticket.cust_id.company.name".<p></p>
Make sure that all fields you use that start with the same table, for example, ticket, or else you will receive a big join that you probably do not want.<p></p>
For many-to-many relations there is a special notation: table1.(table2-&gt;field2a).field2b Where field2a is a field in table2 that has a foreign key to table1.<p></p>
From CS version 7, the aggregate functions are no longer supported, since the query is sent to NetServer instead of directly to the database. It is possible to circumvent this by setting the reg_id 235 to 1 and explicitly use bypassNetserver(true) in the SearchEngine. Be aware of any security implications this might cause.
*/
class SearchEngine {
    /** 
    Adds a field-comparison criterion that compares 2 database fields to a database query.<p></p>
    You can optionally add functions to be applied to the 2 fields.
    */
    Void addComparison(String field1, String compOperator, String field2, String rowOperator, Integer priority);
    /** 
    Adds a field-comparison criterion that compares 2 database fields to a database query with functions to be applied to the 2 fields.
    */
    Void addComparison(String field1, String func1, String compOperator, String field2, String func2, String rowOperator, Integer priority);
    /** 
    Adds a criterion on a database field to the database query<p></p>
    You can optionally add a row operator, priority, and function to be applied to the field.
    */
    Void addCriteria(String field, String compOperator, String value);
    /** 
    Adds a criterion on a database field to the database query<p></p>
    You can optionally add a function to be applied to the field.
    */
    Void addCriteria(String field, String compOperator, String value, String rowOperator, Integer priority);
    /** 
    Adds a criterion on a database field to the database query.
    */
    Void addCriteria(String field, String function, String compOperator, String value, String rowOperator, Integer priority);
    /** 
    Adds data for use in an update or insert query.
    */
    Void addData(String field, String value);
    /** 
    Adds a data field to the SearchEngine. A data field is a field assigned to another field instead of a value.
    */
    Void addDataField(String field1, String field2);
    /** 
    Adds a data field to the SearchEngine. A data field is a field assigned to another field instead of a value.<p></p>
    Can only be used in update() queries.
    */
    Void addDataField(String field1, String field2, String function);
    /** 
    Adds a field to the SELECT part of the database query
    */
    Void addField(String field);
    /** 
    Adds a field to the SELECT part of the database query with a function to be applied to the field.
    */
    Void addField(String field, String function);
    /** 
    A shortcut to add multiple fields to a query. Adds all fields in the comma-separated string "fields", prefixed by "table" and a dot ".".
    */
    Void addFields(String table, String fields);
    /** 
    Adds a HAVING clause to the database query.
    */
    Void addHaving(String field, String compOperator, String value, String rowOperator, Integer priority);
    /** 
    Adds a HAVING clause to the database query.
    */
    Void addHaving(String field, String function, String compOperator, String value, String rowOperator, Integer priority);
    /** 
    Does NOT work with NetServer. You need to bypass NetServer (see the method bypassNetServer) if you need to use this.
    */
    Void addJoinCriteria(String p_0, String p_1, String p_2, String p_3, Integer p_4);
    /** 
    Adds a restriction to the order on the listing of the database result.
    */
    Void addOrder(String field, Bool ascending);
    /** 
    Adds a restriction to the order on the listing of the database result.
    */
    Void addOrder(String field, String function, Bool ascending);
    /** 
    Returns the SQL query generated by the SearchEngine. The query is built by <code>addCriteria()</code>,<code>addComparison()</code>,<code>addData()</code>, and so on.
    */
    String buildSql();
    /** 
    Returns the SQL query generated by the SearchEngine. The query is built by <code>addCriteria()</code>,<code>addComparison()</code>,<code>addData()</code>, and so on.
    */
    String buildSql(String type);
    /** 
    From version 7, all queries are sent to NetServer instead of directly to the database. This function will allow you to send the queries directly to the database instead.
    */
    Void bypassNetServer(Bool p_0);
    /** 
    Returns the count of columns (selected fields) in the SearchEngine query.
    */
    Integer countColumns();
    /** 
    Returns the number of rows in the result set.
    */
    Integer countRows();
    /** 
    After adding criteria, call this to delete the items that was selected by the query.
    */
    Void delete();
    /** 
    Checks if the end of the result set is reached.
    */
    Bool eof();
    /** 
    Executes the query. Must be called to get the results.
    */
    Integer execute();
    /** 
    Executes the query and return the result as a HTML formatted table.
    */
    String executeHTMLTable();
    /** 
    Executes the query and returns the result in the matrix.
    */
    Void executeInto(StringMatrix matrix);
    /** 
    Executes the query and return the result as a JSON formatted text.
    */
    String executeJSON();
    /** 
    Executes the query and return the result as a text formatted table (similar to MySQL).
    */
    String executeTextTable();
    /** 
    Executes the SearchEngine to a JSONBuilder.<p></p>
    The fields string can contain a comma-separated list of label:fieldType elements, allowing you to better control the resulting json. The label is the name the field gets in the json object. The fieldType can be "Integer", "Float", "Bool", or "String" (default). The json object member will be formatted accordingly, e.g. a Bool will be "true" or "false", while Integer/Float will become unquoted numbers.<p></p>
    The arrayName will become the name of the array in the JSONBuilder.
    */
    Void executeToJSONBuilder(JSONBuilder jb, String fields, String arrayName);
    /** 
    Finds all alternative fields given a start field.<p></p>
    These fields can be used in <code>addField()</code> or similar functions.
    */
    String[] findAlternativeFields(String fieldBeginsWith);
    String[] findRelations(String p_0, Bool p_1);
    /** 
    Sets the row pointer to the first item of the result set.
    */
    Bool first();
    /** 
    Returns the value of a field.
    */
    String getField(Integer num);
    /** 
    Returns the value of a field.
    */
    String getField(String name);
    /** 
    Returns the value of a field.
    */
    String getField(String name, String function);
    /** 
    Returns fields as JSON formatted string.
    */
    String getFieldsJSON();
    /** 
    After adding the values of the fields, call this function to actually do the insert in the database. Returns the resulting ID of the insert.
    */
    Integer insert();
    /** 
    If not the end of the result set is reached, the result pointer is set to the next line.
    */
    Bool next();
    /** 
    Does the select-query and returns the size of the result set.
    */
    Integer select();
    /** 
    Sets a CRMScript function as a callback that will be used to convert the values before they are displayed in the grid.
    */
    Void setCallBack(String functionName);
    /** 
    Forces SearchEngine to use a distinct in the query.
    */
    Void setDBDistinct(Bool p_0);
    /** 
    Makes the entries distinct so that equal tickets will not be listed.
    */
    Void setDistinct(String field);
    /** 
    Sets or removes a group-clause to all of the fields in the query (added by the <code>addField()</code> function).
    */
    Void setGroup(Bool set);
    /** 
    Sets the limit of number of rows to receive in the result set.
    */
    Void setLimit(Integer number);
    /** 
    Use this function after <code>addData()</code>, which sets the values that will be modified, and <code>addCriteria()</code>, which do a restriction on the items to modify.
    */
    Void update();
}`;